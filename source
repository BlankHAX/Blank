-- ========================================
-- Five Nights: Hunted - Enhanced Script
-- Author: Blank_lol (Enhanced Version)
-- ========================================

local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

-- ========================================
-- CONFIGURATION & CONSTANTS
-- ========================================

local CONFIG = {
    UI = {
        Name = "Five Nights: Hunted - Enhanced",
        LoadingTitle = "Five Nights: Hunted",
        LoadingSubtitle = "Enhanced Edition Loading...",
        Theme = "DarkBlue", -- More elegant theme
        Icon = "shield-check"
    },
    ESP = {
        Colors = {
            Players = Color3.fromRGB(255, 100, 100),  -- Soft red
            Computer = Color3.fromRGB(100, 255, 100), -- Soft green  
            Locker = Color3.fromRGB(100, 150, 255),   -- Soft blue
            BallPit = Color3.fromRGB(255, 200, 100),  -- Soft orange
            Escape = Color3.fromRGB(255, 255, 100),   -- Soft yellow
            Monster = Color3.fromRGB(200, 100, 255)   -- Soft purple
        },
        UpdateRate = 0.3, -- Faster update for better cleanup
        MaxDistance = 1000 -- Only show ESP within this distance
    },
    Player = {
        DefaultSpeed = 16,
        MaxSpeed = 50,
        DefaultFOV = 70,
        MaxHealth = 100
    }
}

-- ========================================
-- GLOBAL VARIABLES
-- ========================================

local State = {
    ESP = {
        Players = false,
        Computer = false,
        Locker = false,
        BallPit = false,
        Escape = false,
        Monster = false
    },
    Player = {
        Noclip = false,
        SpeedBoost = false,
        InfiniteJump = false,
        GodMode = false,
        FastInteract = false,
        Fullbright = false,
        AntiRagdoll = false
    },
    Connections = {
        RunService = nil,
        JumpConnection = nil,
        ESPConnections = {},
        FastInteractConnection = nil,
        FullbrightConnection = nil,
        AntiRagdollConnection = nil
    },
    Values = {
        Speed = CONFIG.Player.DefaultSpeed,
        FOV = CONFIG.Player.DefaultFOV
    }
}

-- ========================================
-- UTILITY FUNCTIONS
-- ========================================

local function SafeDestroy(object)
    if object and object.Parent then
        object:Destroy()
    end
end

local function GetDistance(pos1, pos2)
    return math.floor((pos1 - pos2).Magnitude)
end

local function GetPlayerPosition()
    local player = game.Players.LocalPlayer
    if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        return player.Character.HumanoidRootPart.Position
    end
    return nil
end

local function GetTargetPosition(target)
    if target:FindFirstChild("HumanoidRootPart") then
        return target.HumanoidRootPart.Position
    elseif target:FindFirstChild("PrimaryPart") then
        return target.PrimaryPart.Position
    else
        -- Find first BasePart
        for _, part in pairs(target:GetChildren()) do
            if part:IsA("BasePart") then
                return part.Position
            end
        end
    end
    return nil
end

-- ========================================
-- ESP SYSTEM
-- ========================================

local ESPManager = {}

function ESPManager.CreateESP(target, color, text, parent)
    if not target then return end
    
    -- Remove existing ESP first
    ESPManager.RemoveESP(target)
    
    -- Create highlight with better visual settings
    local highlight = Instance.new("Highlight")
    highlight.OutlineColor = color
    highlight.FillColor = color
    highlight.FillTransparency = 0.7
    highlight.OutlineTransparency = 0.2
    highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
    highlight.Parent = target
    
    -- Create distance billboard
    local billboard = Instance.new("BillboardGui")
    billboard.Size = UDim2.new(0, 100, 0, 30) -- Smaller text box
    billboard.StudsOffset = Vector3.new(0, 1.5, 0)
    billboard.AlwaysOnTop = true
    billboard.LightInfluence = 0
    billboard.Name = "ESPGui"
    billboard.Parent = parent or target
    
    local textLabel = Instance.new("TextLabel")
    textLabel.Size = UDim2.new(1, 0, 1, 0)
    textLabel.BackgroundTransparency = 1
    textLabel.TextColor3 = Color3.new(1, 1, 1) -- White text for better visibility
    textLabel.TextStrokeTransparency = 0
    textLabel.TextStrokeColor3 = Color3.new(0, 0, 0)
    textLabel.TextSize = 12 -- Fixed smaller text size
    textLabel.Font = Enum.Font.Gotham
    textLabel.Parent = billboard
    
    -- Enhanced distance update function
    local function UpdateDistance()
        local playerPos = GetPlayerPosition()
        local targetPos = GetTargetPosition(target)
        
        if playerPos and targetPos then
            local distance = GetDistance(playerPos, targetPos)
            
            -- Hide ESP if too far away
            if distance > CONFIG.ESP.MaxDistance then
                billboard.Enabled = false
                highlight.Enabled = false
            else
                billboard.Enabled = true
                highlight.Enabled = true
                textLabel.Text = string.format("%s\n[%d studs]", text, distance)
                
                -- Dynamic color based on distance
                local alpha = math.max(0.3, 1 - (distance / CONFIG.ESP.MaxDistance))
                textLabel.TextTransparency = 1 - alpha
            end
        else
            textLabel.Text = text
        end
    end
    
    -- Initial update
    UpdateDistance()
    
    -- Store connection for cleanup
    local connection = game:GetService("RunService").Heartbeat:Connect(function()
        if billboard.Parent and target.Parent then
            UpdateDistance()
        else
            connection:Disconnect()
        end
    end)
    
    State.Connections.ESPConnections[target] = connection
end

function ESPManager.RemoveESP(target, parent)
    if not target then return end
    
    -- Remove highlight from target
    local highlight = target:FindFirstChildOfClass("Highlight")
    if highlight then
        SafeDestroy(highlight)
    end
    
    -- Remove all ESPGui from target and its children
    for _, child in pairs(target:GetDescendants()) do
        if child.Name == "ESPGui" and child:IsA("BillboardGui") then
            SafeDestroy(child)
        end
    end
    
    -- Remove ESPGui from target itself
    local billboard = target:FindFirstChild("ESPGui")
    if billboard then
        SafeDestroy(billboard)
    end
    
    -- Remove billboard from parent if specified
    if parent then
        local parentBillboard = parent:FindFirstChild("ESPGui")
        if parentBillboard then
            SafeDestroy(parentBillboard)
        end
        
        -- Also check parent's children
        for _, child in pairs(parent:GetChildren()) do
            if child.Name == "ESPGui" and child:IsA("BillboardGui") then
                SafeDestroy(child)
            end
        end
    end
    
    -- Disconnect connection
    if State.Connections.ESPConnections[target] then
        State.Connections.ESPConnections[target]:Disconnect()
        State.Connections.ESPConnections[target] = nil
    end
end

function ESPManager.UpdateESPType(espType, enabled, searchPath, itemName, color)
    State.ESP[espType] = enabled
    
    if enabled then
        task.spawn(function()
            while State.ESP[espType] do
                for _, folder in pairs(game.Workspace:GetChildren()) do
                    if folder:IsA("Folder") and folder:FindFirstChild("Map") then
                        local targetFolder = folder.Map
                        for _, pathSegment in pairs(searchPath) do
                            targetFolder = targetFolder:FindFirstChild(pathSegment)
                            if not targetFolder then break end
                        end
                        
                        if targetFolder then
                            for _, item in pairs(targetFolder:GetChildren()) do
                                if item:IsA("Model") and not item:FindFirstChildOfClass("Highlight") then
                                    ESPManager.CreateESP(item, color, itemName, item)
                                end
                            end
                        end
                    end
                end
                task.wait(CONFIG.ESP.UpdateRate)
            end
        end)
    end
    
    -- Enhanced cleanup when disabled
    if not enabled then
        task.spawn(function()
            for _, folder in pairs(game.Workspace:GetChildren()) do
                if folder:IsA("Folder") and folder:FindFirstChild("Map") then
                    local targetFolder = folder.Map
                    for _, pathSegment in pairs(searchPath) do
                        targetFolder = targetFolder:FindFirstChild(pathSegment)
                        if not targetFolder then break end
                    end
                    
                    if targetFolder then
                        for _, item in pairs(targetFolder:GetChildren()) do
                            if item:IsA("Model") then
                                ESPManager.RemoveESP(item, item)
                            end
                        end
                    end
                end
            end
            
            -- Also clean up any remaining ESP connections for this type
            for target, connection in pairs(State.Connections.ESPConnections) do
                if connection and target.Parent == nil then
                    connection:Disconnect()
                    State.Connections.ESPConnections[target] = nil
                end
            end
        end)
    end
end

-- ========================================
-- PLAYER FUNCTIONS
-- ========================================

local PlayerManager = {}

function PlayerManager.SetGodMode(enabled)
    local player = game.Players.LocalPlayer
    local character = player.Character
    if not character then return end
    
    local humanoid = character:FindFirstChild("Humanoid")
    if not humanoid then return end
    
    State.Player.GodMode = enabled
    
    if enabled then
        humanoid.MaxHealth = math.huge
        humanoid.Health = math.huge
        
        local connection
        connection = humanoid.HealthChanged:Connect(function()
            if State.Player.GodMode then
                humanoid.Health = math.huge
            else
                connection:Disconnect()
            end
        end)
    else
        humanoid.MaxHealth = CONFIG.Player.MaxHealth
        humanoid.Health = CONFIG.Player.MaxHealth
    end
end

function PlayerManager.SetNoclip(enabled)
    State.Player.Noclip = enabled
    
    if enabled then
        State.Connections.RunService = game:GetService("RunService").Stepped:Connect(function()
            local character = game.Players.LocalPlayer.Character
            if character then
                for _, part in pairs(character:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.CanCollide = false
                    end
                end
            end
        end)
    else
        if State.Connections.RunService then
            State.Connections.RunService:Disconnect()
            State.Connections.RunService = nil
        end
        
        local character = game.Players.LocalPlayer.Character
        if character then
            for _, part in pairs(character:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.CanCollide = true
                end
            end
        end
    end
end

function PlayerManager.SetInfiniteJump(enabled)
    State.Player.InfiniteJump = enabled
    
    if enabled then
        State.Connections.JumpConnection = game:GetService("UserInputService").JumpRequest:Connect(function()
            local character = game.Players.LocalPlayer.Character
            if character then
                local humanoid = character:FindFirstChildOfClass("Humanoid")
                if humanoid then
                    humanoid:ChangeState("Jumping")
                end
            end
        end)
    else
        if State.Connections.JumpConnection then
            State.Connections.JumpConnection:Disconnect()
            State.Connections.JumpConnection = nil
        end
    end
end

function PlayerManager.SetSpeed(speed)
    State.Values.Speed = speed
    if State.Player.SpeedBoost then
        local character = game.Players.LocalPlayer.Character
        if character then
            local humanoid = character:FindFirstChild("Humanoid")
            if humanoid then
                humanoid.WalkSpeed = speed
            end
        end
    end
end

function PlayerManager.SetSpeedBoost(enabled)
    State.Player.SpeedBoost = enabled
    
    if enabled then
        task.spawn(function()
            while State.Player.SpeedBoost do
                local character = game.Players.LocalPlayer.Character
                if character then
                    local humanoid = character:FindFirstChild("Humanoid")
                    if humanoid then
                        humanoid.WalkSpeed = State.Values.Speed
                    end
                end
                task.wait(0.1)
            end
        end)
    end
end

function PlayerManager.SetFOV(fov)
    State.Values.FOV = fov
    if game.Workspace.CurrentCamera then
        game.Workspace.CurrentCamera.FieldOfView = fov
    end
end
function PlayerManager.SetFastInteract(enabled)
    State.Player.FastInteract = enabled
    
    if enabled then
        task.spawn(function()
            State.Connections.FastInteractConnection = game:GetService("RunService").Heartbeat:Connect(function()
                for i = 1, 10 do -- Spam 10 times per frame for instant escape
                    game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("MonsterService"):WaitForChild("RE"):WaitForChild("Escape"):FireServer()
                end
            end)
        end)
    else
        if State.Connections.FastInteractConnection then
            State.Connections.FastInteractConnection:Disconnect()
            State.Connections.FastInteractConnection = nil
        end
    end
end

function PlayerManager.SetFullbright(enabled)
    State.Player.Fullbright = enabled
    
    if enabled then
        State.Connections.FullbrightConnection = game:GetService("RunService").Heartbeat:Connect(function()
            game:GetService("Lighting").Brightness = 2
            game:GetService("Lighting").ClockTime = 14
            game:GetService("Lighting").FogEnd = 100000
            game:GetService("Lighting").GlobalShadows = false
            game:GetService("Lighting").OutdoorAmbient = Color3.fromRGB(128, 128, 128)
        end)
    else
        if State.Connections.FullbrightConnection then
            State.Connections.FullbrightConnection:Disconnect()
            State.Connections.FullbrightConnection = nil
        end
        
        -- Reset lighting to default
        game:GetService("Lighting").Brightness = 1
        game:GetService("Lighting").ClockTime = 0
        game:GetService("Lighting").FogEnd = 100000
        game:GetService("Lighting").GlobalShadows = true
        game:GetService("Lighting").OutdoorAmbient = Color3.fromRGB(70, 70, 70)
    end
end

function PlayerManager.SetAntiRagdoll(enabled)
    State.Player.AntiRagdoll = enabled
    
    if enabled then
        State.Connections.AntiRagdollConnection = game:GetService("RunService").Heartbeat:Connect(function()
            local character = game.Players.LocalPlayer.Character
            if character then
                local humanoid = character:FindFirstChild("Humanoid")
                if humanoid then
                    humanoid.PlatformStand = false
                    
                    -- Keep character parts anchored to prevent ragdolling
                    for _, part in pairs(character:GetChildren()) do
                        if part:IsA("BasePart") and part.Name ~= "HumanoidRootPart" then
                            local weld = part:FindFirstChild("Motor6D") or part:FindFirstChild("Weld")
                            if not weld then
                                part.Anchored = false -- Don't anchor everything, just prevent ragdoll
                            end
                        end
                    end
                end
            end
        end)
    else
        if State.Connections.AntiRagdollConnection then
            State.Connections.AntiRagdollConnection:Disconnect()
            State.Connections.AntiRagdollConnection = nil
        end
    end
end

-- ========================================
-- UI CREATION
-- ========================================

local Window = Rayfield:CreateWindow({
    Name = CONFIG.UI.Name,
    Icon = CONFIG.UI.Icon,
    LoadingTitle = CONFIG.UI.LoadingTitle,
    LoadingSubtitle = CONFIG.UI.LoadingSubtitle,
    Theme = CONFIG.UI.Theme,
    
    DisableRayfieldPrompts = false,
    DisableBuildWarnings = false,
    
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "FNH_Enhanced",
        FileName = "Config"
    },
    
    Discord = {
        Enabled = false,
        Invite = "noinvitelink",
        RememberJoins = true
    },
    
    KeySystem = false,
    KeySettings = {
        Title = "Five Nights: Hunted",
        Subtitle = "Enhanced Key System",
        Note = "No key required for this version",
        FileName = "FNH_Key",
        SaveKey = true,
        GrabKeyFromSite = false,
        Key = {"Enhanced"}
    }
})

-- Startup notification
Rayfield:Notify({
    Title = "Enhanced Script Loaded",
    Content = "Version 1.0 - All systems online",
    Duration = 3,
    Image = "check-circle",
})

-- ========================================
-- TABS CREATION
-- ========================================

local PlayerTab = Window:CreateTab("Player", "user")
local ESPTab = Window:CreateTab("ESP", "eye")
local SettingsTab = Window:CreateTab("Settings", "settings")

-- ========================================
-- PLAYER TAB
-- ========================================

-- God Mode
PlayerTab:CreateToggle({
    Name = "God Mode",
    CurrentValue = false,
    Flag = "GodMode",
    Callback = function(value)
        PlayerManager.SetGodMode(value)
    end,
})

-- Noclip
PlayerTab:CreateToggle({
    Name = "Noclip",
    CurrentValue = false,
    Flag = "Noclip",
    Callback = function(value)
        PlayerManager.SetNoclip(value)
    end,
})

-- Infinite Jump
PlayerTab:CreateToggle({
    Name = "Infinite Jump",
    CurrentValue = false,
    Flag = "InfiniteJump",
    Callback = function(value)
        PlayerManager.SetInfiniteJump(value)
    end,
})

-- Speed Boost Toggle
PlayerTab:CreateToggle({
    Name = "Speed Boost",
    CurrentValue = false,
    Flag = "SpeedBoost",
    Callback = function(value)
        PlayerManager.SetSpeedBoost(value)
    end,
})

-- Speed Slider
PlayerTab:CreateSlider({
    Name = "Walk Speed",
    Range = {0, CONFIG.Player.MaxSpeed},
    Increment = 1,
    Suffix = " Speed",
    CurrentValue = CONFIG.Player.DefaultSpeed,
    Flag = "SpeedSlider",
    Callback = function(value)
        PlayerManager.SetSpeed(value)
    end,
})

-- FOV Slider
PlayerTab:CreateSlider({
    Name = "Field of View",
    Range = {30, 120},
    Increment = 1,
    Suffix = "Â°",
    CurrentValue = CONFIG.Player.DefaultFOV,
    Flag = "FOVSlider",
    Callback = function(value)
        PlayerManager.SetFOV(value)
    end,
})

-- Fast Interact
PlayerTab:CreateToggle({
    Name = "Fast Interact (Doors)",
    CurrentValue = false,
    Flag = "FastInteract",
    Callback = function(value)
        PlayerManager.SetFastInteract(value)
    end,
})

-- Fullbright
PlayerTab:CreateToggle({
    Name = "Fullbright",
    CurrentValue = false,
    Flag = "Fullbright",
    Callback = function(value)
        PlayerManager.SetFullbright(value)
    end,
})

-- Anti Ragdoll
PlayerTab:CreateToggle({
    Name = "Anti Ragdoll",
    CurrentValue = false,
    Flag = "AntiRagdoll",
    Callback = function(value)
        PlayerManager.SetAntiRagdoll(value)
    end,
})

-- ========================================
-- ESP TAB
-- ========================================

-- Players ESP
ESPTab:CreateToggle({
    Name = "Players ESP",
    CurrentValue = false,
    Flag = "PlayersESP",
    Callback = function(value)
        State.ESP.Players = value
        if value then
            task.spawn(function()
                while State.ESP.Players do
                    for _, player in pairs(game:GetService("Players"):GetPlayers()) do
                        if player ~= game.Players.LocalPlayer and player.Character and 
                           not player.Character:FindFirstChildOfClass("Highlight") then
                            ESPManager.CreateESP(
                                player.Character, 
                                CONFIG.ESP.Colors.Players, 
                                player.Name, 
                                player.Character:FindFirstChild("Head")
                            )
                        end
                    end
                    task.wait(CONFIG.ESP.UpdateRate)
                end
                
                -- Cleanup
                for _, player in pairs(game:GetService("Players"):GetPlayers()) do
                    if player ~= game.Players.LocalPlayer and player.Character then
                        ESPManager.RemoveESP(player.Character)
                    end
                end
            end)
        end
    end,
})

-- Computer ESP
ESPTab:CreateToggle({
    Name = "Computer ESP",
    CurrentValue = false,
    Flag = "ComputerESP",
    Callback = function(value)
        ESPManager.UpdateESPType("Computer", value, {"Tasks"}, "Computer", CONFIG.ESP.Colors.Computer)
    end,
})

-- Locker ESP
ESPTab:CreateToggle({
    Name = "Locker ESP",
    CurrentValue = false,
    Flag = "LockerESP",
    Callback = function(value)
        ESPManager.UpdateESPType("Locker", value, {"Lockers"}, "Locker", CONFIG.ESP.Colors.Locker)
    end,
})

-- Ball Pit ESP
ESPTab:CreateToggle({
    Name = "Ball Pit ESP",
    CurrentValue = false,
    Flag = "BallPitESP",
    Callback = function(value)
        ESPManager.UpdateESPType("BallPit", value, {"Hooks"}, "Ball Pit", CONFIG.ESP.Colors.BallPit)
    end,
})

-- Escape Door ESP
ESPTab:CreateToggle({
    Name = "Escape Door ESP",
    CurrentValue = false,
    Flag = "EscapeESP",
    Callback = function(value)
        ESPManager.UpdateESPType("Escape", value, {"Escapes"}, "Escape", CONFIG.ESP.Colors.Escape)
    end,
})

-- ESP Settings Section
ESPTab:CreateSection("ESP Settings")

ESPTab:CreateSlider({
    Name = "Max ESP Distance",
    Range = {100, 2000},
    Increment = 50,
    Suffix = " studs",
    CurrentValue = CONFIG.ESP.MaxDistance,
    Flag = "ESPDistance",
    Callback = function(value)
        CONFIG.ESP.MaxDistance = value
    end,
})

-- ========================================
-- SETTINGS TAB
-- ========================================

-- Performance Section
SettingsTab:CreateSection("Performance")

SettingsTab:CreateSlider({
    Name = "ESP Update Rate",
    Range = {0.1, 2.0},
    Increment = 0.1,
    Suffix = "s",
    CurrentValue = CONFIG.ESP.UpdateRate,
    Flag = "ESPUpdateRate",
    Callback = function(value)
        CONFIG.ESP.UpdateRate = value
    end,
})

-- Control Section
SettingsTab:CreateSection("Controls")

SettingsTab:CreateButton({
    Name = "Rejoin Server",
    Callback = function()
        game:GetService("TeleportService"):Teleport(game.PlaceId, game.Players.LocalPlayer)
    end,
})

SettingsTab:CreateButton({
    Name = "Unload Script",
    Callback = function()
        -- Cleanup all connections
        for target, connection in pairs(State.Connections.ESPConnections) do
            if connection then
                connection:Disconnect()
            end
        end
        
        if State.Connections.RunService then
            State.Connections.RunService:Disconnect()
        end
        
        if State.Connections.JumpConnection then
            State.Connections.JumpConnection:Disconnect()
        end
        
        if State.Connections.FastInteractConnection then
            State.Connections.FastInteractConnection:Disconnect()
        end
        
        if State.Connections.FullbrightConnection then
            State.Connections.FullbrightConnection:Disconnect()
        end
        
        if State.Connections.AntiRagdollConnection then
            State.Connections.AntiRagdollConnection:Disconnect()
        end
        
        Rayfield:Destroy()
    end,
})

-- ========================================
-- LOAD CONFIGURATION
-- ========================================

Rayfield:LoadConfiguration()
