local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local CONFIG = {
    UI = {
        Name = "Five Nights: Hunted - Enhanced",
        LoadingTitle = "Five Nights: Hunted",
        LoadingSubtitle = "Enhanced Edition Loading...",
        Theme = "DarkBlue",
        Icon = "shield-check"
    },
    ESP = {
        Colors = {
            Players = Color3.fromRGB(255, 100, 100),
            Computer = Color3.fromRGB(100, 255, 100),
            Locker = Color3.fromRGB(100, 150, 255),
            BallPit = Color3.fromRGB(255, 200, 100),
            Escape = Color3.fromRGB(255, 255, 100)
        },
        UpdateRate = 0.3,
        MaxDistance = 1000
    },
    Player = {
        DefaultSpeed = 16,
        MaxSpeed = 50,
        DefaultFOV = 70
    }
}

local State = {
    ESP = {
        Players = false,
        Computer = false,
        Locker = false,
        BallPit = false,
        Escape = false
    },
    Player = {
        Noclip = false,
        SpeedBoost = false,
        Fullbright = false
    },
    Connections = {
        RunService = nil,
        ESPConnections = {},
        PlayerESPConnection = nil,
        FullbrightConnection = nil
    },
    Values = {
        Speed = CONFIG.Player.DefaultSpeed,
        FOV = CONFIG.Player.DefaultFOV,
        OriginalWalkSpeed = nil
    }
}

local function SafeDestroy(object)
    if object and object.Parent then
        object:Destroy()
    end
end

local function GetDistance(pos1, pos2)
    return math.floor((pos1 - pos2).Magnitude)
end

local function GetPlayerPosition()
    local player = game.Players.LocalPlayer
    if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        return player.Character.HumanoidRootPart.Position
    end
    return nil
end

local function GetTargetPosition(target)
    if not target or not target.Parent then return nil end
    
    if target:FindFirstChild("HumanoidRootPart") then
        return target.HumanoidRootPart.Position
    elseif target:FindFirstChild("PrimaryPart") then
        return target.PrimaryPart.Position
    else
        for _, part in pairs(target:GetChildren()) do
            if part:IsA("BasePart") then
                return part.Position
            end
        end
    end
    return nil
end

local ESPManager = {}

function ESPManager.CreateESP(target, color, text, parent)
    if not target or not target.Parent then return end
    
    ESPManager.RemoveESP(target)
    
    local highlight = Instance.new("Highlight")
    highlight.OutlineColor = color
    highlight.FillColor = color
    highlight.FillTransparency = 0.7
    highlight.OutlineTransparency = 0.2
    highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
    highlight.Parent = target
    
    local billboard = Instance.new("BillboardGui")
    billboard.Size = UDim2.new(0, 100, 0, 30)
    billboard.StudsOffset = Vector3.new(0, 1.5, 0)
    billboard.AlwaysOnTop = true
    billboard.LightInfluence = 0
    billboard.Name = "ESPGui"
    billboard.Parent = parent or target
    
    local textLabel = Instance.new("TextLabel")
    textLabel.Size = UDim2.new(1, 0, 1, 0)
    textLabel.BackgroundTransparency = 1
    textLabel.TextColor3 = Color3.new(1, 1, 1)
    textLabel.TextStrokeTransparency = 0
    textLabel.TextStrokeColor3 = Color3.new(0, 0, 0)
    textLabel.TextSize = 12
    textLabel.Font = Enum.Font.Gotham
    textLabel.Parent = billboard
    
    local function UpdateDistance()
        if not target or not target.Parent or not billboard.Parent then
            return false
        end
        
        local playerPos = GetPlayerPosition()
        local targetPos = GetTargetPosition(target)
        
        if playerPos and targetPos then
            local distance = GetDistance(playerPos, targetPos)
            
            if distance > CONFIG.ESP.MaxDistance then
                billboard.Enabled = false
                highlight.Enabled = false
            else
                billboard.Enabled = true
                highlight.Enabled = true
                textLabel.Text = string.format("%s\n[%d studs]", text, distance)
                
                local alpha = math.max(0.3, 1 - (distance / CONFIG.ESP.MaxDistance))
                textLabel.TextTransparency = 1 - alpha
            end
        else
            textLabel.Text = text
        end
        return true
    end
    
    UpdateDistance()
    
    local connection
    connection = game:GetService("RunService").Heartbeat:Connect(function()
        if not UpdateDistance() then
            connection:Disconnect()
            if State.Connections.ESPConnections[target] then
                State.Connections.ESPConnections[target] = nil
            end
        end
    end)
    
    State.Connections.ESPConnections[target] = connection
end

function ESPManager.RemoveESP(target, parent)
    if not target then return end
    
    local highlight = target:FindFirstChildOfClass("Highlight")
    if highlight then
        SafeDestroy(highlight)
    end
    
    for _, child in pairs(target:GetDescendants()) do
        if child.Name == "ESPGui" and child:IsA("BillboardGui") then
            SafeDestroy(child)
        end
    end
    
    local billboard = target:FindFirstChild("ESPGui")
    if billboard then
        SafeDestroy(billboard)
    end
    
    if parent then
        local parentBillboard = parent:FindFirstChild("ESPGui")
        if parentBillboard then
            SafeDestroy(parentBillboard)
        end
        
        for _, child in pairs(parent:GetChildren()) do
            if child.Name == "ESPGui" and child:IsA("BillboardGui") then
                SafeDestroy(child)
            end
        end
    end
    
    if State.Connections.ESPConnections[target] then
        State.Connections.ESPConnections[target]:Disconnect()
        State.Connections.ESPConnections[target] = nil
    end
end

function ESPManager.CleanupAllESP()
    for target, connection in pairs(State.Connections.ESPConnections) do
        if connection then
            pcall(function() connection:Disconnect() end)
        end
        ESPManager.RemoveESP(target)
    end
    State.Connections.ESPConnections = {}
    
    if State.Connections.PlayerESPConnection then
        pcall(function() task.cancel(State.Connections.PlayerESPConnection) end)
        State.Connections.PlayerESPConnection = nil
    end
end

function ESPManager.UpdateESPType(espType, enabled, searchPath, itemName, color)
    State.ESP[espType] = enabled
    
    if enabled then
        task.spawn(function()
            while State.ESP[espType] do
                for _, folder in pairs(game.Workspace:GetChildren()) do
                    if folder:IsA("Folder") and folder:FindFirstChild("Map") then
                        local targetFolder = folder.Map
                        for _, pathSegment in pairs(searchPath) do
                            targetFolder = targetFolder and targetFolder:FindFirstChild(pathSegment)
                            if not targetFolder then break end
                        end
                        
                        if targetFolder then
                            for _, item in pairs(targetFolder:GetChildren()) do
                                if item:IsA("Model") and not item:FindFirstChildOfClass("Highlight") then
                                    ESPManager.CreateESP(item, color, itemName, item)
                                end
                            end
                        end
                    end
                end
                task.wait(CONFIG.ESP.UpdateRate)
            end
        end)
    else
        task.spawn(function()
            for _, folder in pairs(game.Workspace:GetChildren()) do
                if folder:IsA("Folder") and folder:FindFirstChild("Map") then
                    local targetFolder = folder.Map
                    for _, pathSegment in pairs(searchPath) do
                        targetFolder = targetFolder and targetFolder:FindFirstChild(pathSegment)
                        if not targetFolder then break end
                    end
                    
                    if targetFolder then
                        for _, item in pairs(targetFolder:GetChildren()) do
                            if item:IsA("Model") then
                                ESPManager.RemoveESP(item, item)
                            end
                        end
                    end
                end
            end
            
            for target, connection in pairs(State.Connections.ESPConnections) do
                if connection and (not target or not target.Parent) then
                    pcall(function() connection:Disconnect() end)
                    State.Connections.ESPConnections[target] = nil
                end
            end
        end)
    end
end

local PlayerManager = {}

function PlayerManager.SetNoclip(enabled)
    State.Player.Noclip = enabled
    
    if State.Connections.RunService then
        State.Connections.RunService:Disconnect()
        State.Connections.RunService = nil
    end
    
    if enabled then
        State.Connections.RunService = game:GetService("RunService").Stepped:Connect(function()
            local character = game.Players.LocalPlayer.Character
            if character then
                for _, part in pairs(character:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.CanCollide = false
                    end
                end
            end
        end)
    else
        local character = game.Players.LocalPlayer.Character
        if character then
            for _, part in pairs(character:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.CanCollide = true
                end
            end
        end
    end
end

function PlayerManager.SetSpeed(speed)
    State.Values.Speed = speed
    if State.Player.SpeedBoost then
        local character = game.Players.LocalPlayer.Character
        if character then
            local humanoid = character:FindFirstChild("Humanoid")
            if humanoid then
                humanoid.WalkSpeed = speed
            end
        end
    end
end

function PlayerManager.SetSpeedBoost(enabled)
    State.Player.SpeedBoost = enabled
    
    local character = game.Players.LocalPlayer.Character
    if character then
        local humanoid = character:FindFirstChild("Humanoid")
        if humanoid then
            if enabled then
                State.Values.OriginalWalkSpeed = humanoid.WalkSpeed
                humanoid.WalkSpeed = State.Values.Speed
            else
                humanoid.WalkSpeed = State.Values.OriginalWalkSpeed or CONFIG.Player.DefaultSpeed
            end
        end
    end
end

function PlayerManager.SetFOV(fov)
    State.Values.FOV = fov
    if game.Workspace.CurrentCamera then
        game.Workspace.CurrentCamera.FieldOfView = fov
    end
end

function PlayerManager.SetFullbright(enabled)
    State.Player.Fullbright = enabled
    
    if State.Connections.FullbrightConnection then
        State.Connections.FullbrightConnection:Disconnect()
        State.Connections.FullbrightConnection = nil
    end
    
    if enabled then
        State.Connections.FullbrightConnection = game:GetService("RunService").Heartbeat:Connect(function()
            game:GetService("Lighting").Brightness = 2
            game:GetService("Lighting").ClockTime = 14
            game:GetService("Lighting").FogEnd = 100000
            game:GetService("Lighting").GlobalShadows = false
            game:GetService("Lighting").OutdoorAmbient = Color3.fromRGB(128, 128, 128)
        end)
    else
        game:GetService("Lighting").Brightness = 1
        game:GetService("Lighting").ClockTime = 0
        game:GetService("Lighting").FogEnd = 100000
        game:GetService("Lighting").GlobalShadows = true
        game:GetService("Lighting").OutdoorAmbient = Color3.fromRGB(70, 70, 70)
    end
end

local Window = Rayfield:CreateWindow({
    Name = CONFIG.UI.Name,
    Icon = CONFIG.UI.Icon,
    LoadingTitle = CONFIG.UI.LoadingTitle,
    LoadingSubtitle = CONFIG.UI.LoadingSubtitle,
    Theme = CONFIG.UI.Theme,
    
    DisableRayfieldPrompts = false,
    DisableBuildWarnings = false,
    
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "FNH_Enhanced",
        FileName = "Config"
    },
    
    Discord = {
        Enabled = false,
        Invite = "noinvitelink",
        RememberJoints = true
    },
    
    KeySystem = false,
    KeySettings = {
        Title = "Five Nights: Hunted",
        Subtitle = "Enhanced Key System",
        Note = "No key required for this version",
        FileName = "FNH_Key",
        SaveKey = true,
        GrabKeyFromSite = false,
        Key = {"Enhanced"}
    }
})

Rayfield:Notify({
    Title = "Enhanced Script Loaded",
    Content = "Version 1.0 - All systems online",
    Duration = 3,
    Image = "check-circle",
})

local PlayerTab = Window:CreateTab("Player", "user")
local ESPTab = Window:CreateTab("ESP", "eye")
local SettingsTab = Window:CreateTab("Settings", "settings")

PlayerTab:CreateToggle({
    Name = "Noclip",
    CurrentValue = false,
    Flag = "Noclip",
    Callback = function(value)
        PlayerManager.SetNoclip(value)
    end,
})

PlayerTab:CreateToggle({
    Name = "Speed Boost",
    CurrentValue = false,
    Flag = "SpeedBoost",
    Callback = function(value)
        PlayerManager.SetSpeedBoost(value)
    end,
})

PlayerTab:CreateSlider({
    Name = "Walk Speed",
    Range = {0, CONFIG.Player.MaxSpeed},
    Increment = 1,
    Suffix = " Speed",
    CurrentValue = CONFIG.Player.DefaultSpeed,
    Flag = "SpeedSlider",
    Callback = function(value)
        PlayerManager.SetSpeed(value)
    end,
})

PlayerTab:CreateSlider({
    Name = "Field of View",
    Range = {30, 120},
    Increment = 1,
    Suffix = "°",
    CurrentValue = CONFIG.Player.DefaultFOV,
    Flag = "FOVSlider",
    Callback = function(value)
        PlayerManager.SetFOV(value)
    end,
})

PlayerTab:CreateToggle({
    Name = "Fullbright",
    CurrentValue = false,
    Flag = "Fullbright",
    Callback = function(value)
        PlayerManager.SetFullbright(value)
    end,
})

ESPTab:CreateToggle({
    Name = "Players ESP",
    CurrentValue = false,
    Flag = "PlayersESP",
    Callback = function(value)
        State.ESP.Players = value
        
        if State.Connections.PlayerESPConnection then
            pcall(function() task.cancel(State.Connections.PlayerESPConnection) end)
            State.Connections.PlayerESPConnection = nil
        end
        
        if value then
            State.Connections.PlayerESPConnection = task.spawn(function()
                while State.ESP.Players do
                    for _, player in pairs(game:GetService("Players"):GetPlayers()) do
                        if player ~= game.Players.LocalPlayer and player.Character then
                            if not player.Character:FindFirstChildOfClass("Highlight") then
                                ESPManager.CreateESP(
                                    player.Character, 
                                    CONFIG.ESP.Colors.Players, 
                                    player.Name, 
                                    player.Character:FindFirstChild("Head") or player.Character
                                )
                            end
                        end
                    end
                    task.wait(CONFIG.ESP.UpdateRate)
                end
            end)
        else
            for _, player in pairs(game:GetService("Players"):GetPlayers()) do
                if player ~= game.Players.LocalPlayer and player.Character then
                    ESPManager.RemoveESP(player.Character)
                end
            end
        end
    end,
})

ESPTab:CreateToggle({
    Name = "Computer ESP",
    CurrentValue = false,
    Flag = "ComputerESP",
    Callback = function(value)
        ESPManager.UpdateESPType("Computer", value, {"Tasks"}, "Computer", CONFIG.ESP.Colors.Computer)
    end,
})

ESPTab:CreateToggle({
    Name = "Locker ESP",
    CurrentValue = false,
    Flag = "LockerESP",
    Callback = function(value)
        ESPManager.UpdateESPType("Locker", value, {"Lockers"}, "Locker", CONFIG.ESP.Colors.Locker)
    end,
})

ESPTab:CreateToggle({
    Name = "Ball Pit ESP",
    CurrentValue = false,
    Flag = "BallPitESP",
    Callback = function(value)
        ESPManager.UpdateESPType("BallPit", value, {"Hooks"}, "Ball Pit", CONFIG.ESP.Colors.BallPit)
    end,
})

ESPTab:CreateToggle({
    Name = "Escape Door ESP",
    CurrentValue = false,
    Flag = "EscapeESP",
    Callback = function(value)
        ESPManager.UpdateESPType("Escape", value, {"Escapes"}, "Escape", CONFIG.ESP.Colors.Escape)
    end,
})

ESPTab:CreateSection("ESP Settings")

ESPTab:CreateSlider({
    Name = "Max ESP Distance",
    Range = {100, 2000},
    Increment = 50,
    Suffix = " studs",
    CurrentValue = CONFIG.ESP.MaxDistance,
    Flag = "ESPDistance",
    Callback = function(value)
        CONFIG.ESP.MaxDistance = value
    end,
})

SettingsTab:CreateSection("Performance")

SettingsTab:CreateSlider({
    Name = "ESP Update Rate",
    Range = {0.1, 2.0},
    Increment = 0.1,
    Suffix = "s",
    CurrentValue = CONFIG.ESP.UpdateRate,
    Flag = "ESPUpdateRate",
    Callback = function(value)
        CONFIG.ESP.UpdateRate = value
    end,
})

SettingsTab:CreateSection("Controls")

SettingsTab:CreateButton({
    Name = "Rejoin Server",
    Callback = function()
        game:GetService("TeleportService"):Teleport(game.PlaceId, game.Players.LocalPlayer)
    end,
})

SettingsTab:CreateButton({
    Name = "Unload Script",
    Callback = function()
        ESPManager.CleanupAllESP()
        
        if State.Connections.RunService then
            State.Connections.RunService:Disconnect()
        end
        
        if State.Connections.PlayerESPConnection then
            pcall(function() task.cancel(State.Connections.PlayerESPConnection) end)
        end
        
        if State.Connections.FullbrightConnection then
            State.Connections.FullbrightConnection:Disconnect()
        end
        
        -- Reset player speed
        local character = game.Players.LocalPlayer.Character
        if character then
            local humanoid = character:FindFirstChild("Humanoid")
            if humanoid then
                humanoid.WalkSpeed = CONFIG.Player.DefaultSpeed
            end
        end
        
        Rayfield:Destroy()
    end,
})

Rayfield:LoadConfiguration()
